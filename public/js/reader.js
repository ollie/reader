// Generated by CoffeeScript 2.5.0
(function() {
  var App;

  App = class App {
    constructor() {
      var $itemTemplate;
      this._handleScrollLinkClick = this._handleScrollLinkClick.bind(this);
      this._handleMarkChannelsAsReadClick = this._handleMarkChannelsAsReadClick.bind(this);
      this._handleMarkChannelAsReadClick = this._handleMarkChannelAsReadClick.bind(this);
      this._handleChannelClick = this._handleChannelClick.bind(this);
      this._handleItemClick = this._handleItemClick.bind(this);
      this._handleMarkAsReadClick = this._handleMarkAsReadClick.bind(this);
      this._handleMarkAsUnreadClick = this._handleMarkAsUnreadClick.bind(this);
      this.htmlBody = $('html, body');
      this.errorMessage = $('#error-message');
      this.scrollLink = $('#scroll-link');
      this.anchor = $('#anchor');
      this.channelsWrapper = $('#channels-wrapper');
      this.itemsWrapper = $('#items-wrapper');
      this.markChannelsAsReadLink = $('#mark-channels-as-read-link');
      this.markChannelAsReadLink = $('#mark-channel-as-read-link');
      this.itemTitle = $('#item-title');
      this.itemInfo = $('#item-info');
      this.itemContent = $('#item-content');
      this.itemMarkAsRead = $('.js-item-mark-as-read');
      this.itemMarkAsUnread = $('.js-item-mark-as-unread');
      $itemTemplate = $('#item-template');
      this.itemTemplate = Hogan.compile($itemTemplate.html());
      this.activeChannel = this.channelsWrapper.find('.js-active');
      this.activeItem = this.itemsWrapper.find('.js-active');
      this.scrollLink.on('click', this._handleScrollLinkClick);
      this.markChannelsAsReadLink.on('click', this._handleMarkChannelsAsReadClick);
      this.markChannelAsReadLink.on('click', this._handleMarkChannelAsReadClick);
      this.channelsWrapper.on('click', '.js-link', this._handleChannelClick);
      this.itemsWrapper.on('click', '.js-link', this._handleItemClick);
      this.itemMarkAsRead.on('click', this._handleMarkAsReadClick);
      this.itemMarkAsUnread.on('click', this._handleMarkAsUnreadClick);
    }

    _handleScrollLinkClick() {
      return this._scrollToAnchor();
    }

    _handleMarkChannelsAsReadClick(e) {
      var $counter, $item, $link, channel, i, item, j, len, len1, ref, ref1;
      e.preventDefault();
      $link = $(e.currentTarget);
      ref = this.channelsWrapper.find('.reader-item');
      for (i = 0, len = ref.length; i < len; i++) {
        channel = ref[i];
        $counter = $(channel).find('.js-counter');
        if (!$counter.length) {
          continue;
        }
        $counter.text(0);
        $counter.addClass('d-none');
      }
      ref1 = this.itemsWrapper.find('.font-weight-bold');
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        item = ref1[j];
        $item = $(item);
        $item.removeClass('font-weight-bold');
        $item.find('a').removeClass('text-dark').addClass('text-secondary');
      }
      this.itemMarkAsRead.addClass('d-none');
      this.itemMarkAsUnread.removeClass('d-none');
      return $.ajax({
        url: $link.attr('href'),
        method: 'patch',
        beforeSend: () => {
          return this.errorMessage.addClass('d-none');
        },
        error: () => {
          return this.errorMessage.removeClass('d-none');
        }
      });
    }

    _handleMarkChannelAsReadClick(e) {
      var $counter, $item, $link, i, item, len, ref;
      e.preventDefault();
      $link = $(e.currentTarget);
      $counter = this.activeChannel.find('.js-counter');
      $counter.text(0);
      $counter.addClass('d-none');
      ref = this.itemsWrapper.find('.font-weight-bold');
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        $item = $(item);
        $item.removeClass('font-weight-bold');
        $item.find('a').removeClass('text-dark').addClass('text-secondary');
      }
      this.itemMarkAsRead.addClass('d-none');
      this.itemMarkAsUnread.removeClass('d-none');
      return $.ajax({
        url: $link.attr('href'),
        method: 'patch',
        beforeSend: () => {
          return this.errorMessage.addClass('d-none');
        },
        error: () => {
          return this.errorMessage.removeClass('d-none');
        }
      });
    }

    _handleChannelClick(e) {
      var $li, $link;
      e.preventDefault();
      $link = $(e.currentTarget);
      $li = $link.parent();
      return $.ajax({
        url: $link.attr('href'),
        dataType: 'json',
        beforeSend: () => {
          return this.errorMessage.addClass('d-none');
        },
        success: (data) => {
          var itemData;
          this.activeChannel.removeClass('js-active');
          this.activeChannel.find('a').removeClass('bg-lighter');
          $li.addClass('js-active');
          $li.find('a').addClass('bg-lighter');
          this.markChannelAsReadLink.attr('href', data.mark_channel_as_read_url);
          this._renderItems(data.items);
          itemData = data.item;
          this.itemTitle.text(itemData.title).attr('href', itemData.link);
          this.itemInfo.text(itemData.info);
          this.itemMarkAsRead.attr('href', itemData.mark_as_read_url);
          this.itemMarkAsUnread.attr('href', itemData.mark_as_unread_url);
          if (itemData.read) {
            this.itemMarkAsRead.addClass('d-none');
            this.itemMarkAsUnread.removeClass('d-none');
          } else {
            this.itemMarkAsUnread.addClass('d-none');
            this.itemMarkAsRead.removeClass('d-none');
          }
          this.itemContent.html(itemData.description);
          if (!itemData.read) {
            this._scrollToTop();
          }
          this.activeChannel = $li;
          return this.activeItem = this.itemsWrapper.find('.js-active');
        },
        error: () => {
          return this.errorMessage.removeClass('d-none');
        }
      });
    }

    _handleItemClick(e) {
      var $li, $link;
      e.preventDefault();
      $link = $(e.currentTarget);
      $li = $link.parent();
      return $.ajax({
        url: $link.attr('href'),
        dataType: 'json',
        beforeSend: () => {
          return this.errorMessage.addClass('d-none');
        },
        success: (data) => {
          this.activeItem.removeClass('js-active');
          this.activeItem.find('a').removeClass('bg-lighter');
          $li.addClass('js-active');
          $li.find('a').addClass('bg-lighter');
          this.itemTitle.text(data.title).attr('href', data.link);
          this.itemInfo.text(data.info);
          this.itemMarkAsRead.attr('href', data.mark_as_read_url);
          this.itemMarkAsUnread.attr('href', data.mark_as_unread_url);
          if (data.read) {
            this.itemMarkAsRead.addClass('d-none');
            this.itemMarkAsUnread.removeClass('d-none');
          } else {
            this.itemMarkAsUnread.addClass('d-none');
            this.itemMarkAsRead.removeClass('d-none');
          }
          this.itemContent.html(data.description);
          this._scrollToTop();
          return this.activeItem = $li;
        },
        error: () => {
          return this.errorMessage.removeClass('d-none');
        }
      });
    }

    _handleMarkAsReadClick(e) {
      var $link;
      e.preventDefault();
      $link = $(e.currentTarget);
      return $.ajax({
        url: $link.attr('href'),
        method: 'patch',
        beforeSend: () => {
          return this.errorMessage.addClass('d-none');
        },
        success: (data) => {
          var $counter, count;
          this.itemMarkAsRead.addClass('d-none');
          this.itemMarkAsUnread.removeClass('d-none');
          $counter = this.activeChannel.find('.js-counter');
          count = Number($counter.text()) - 1;
          $counter.text(count);
          if (count === 0) {
            $counter.addClass('d-none');
          }
          this.activeItem.removeClass('font-weight-bold');
          return this.activeItem.find('a').removeClass('text-dark').addClass('text-secondary');
        },
        error: () => {
          return this.errorMessage.removeClass('d-none');
        }
      });
    }

    _handleMarkAsUnreadClick(e) {
      var $link;
      e.preventDefault();
      $link = $(e.currentTarget);
      return $.ajax({
        url: $link.attr('href'),
        method: 'patch',
        beforeSend: () => {
          return this.errorMessage.addClass('d-none');
        },
        success: (data) => {
          var $counter, count;
          this.itemMarkAsUnread.addClass('d-none');
          this.itemMarkAsRead.removeClass('d-none');
          $counter = this.activeChannel.find('.js-counter');
          count = Number($counter.text()) + 1;
          $counter.text(count);
          if (count !== 0) {
            $counter.removeClass('d-none');
          }
          this.activeItem.addClass('font-weight-bold');
          return this.activeItem.find('a').removeClass('text-secondary').addClass('text-dark');
        },
        error: () => {
          return this.errorMessage.removeClass('d-none');
        }
      });
    }

    _renderItems(items) {
      var html, i, index, item, len;
      html = '';
      for (index = i = 0, len = items.length; i < len; index = ++i) {
        item = items[index];
        html += this.itemTemplate.render({
          active: index === 0,
          item_url: item.item_url,
          title: item.title,
          read: item.read
        });
        html += '\n';
      }
      return this.itemsWrapper.html(html);
    }

    _scrollToTop() {
      if (!this._isSmallDevice()) {
        return;
      }
      return this.htmlBody.animate({
        scrollTop: 0
      }, 250);
    }

    _scrollToAnchor() {
      var scrollTo, topOffset, windowHeight;
      topOffset = this.anchor.offset().top;
      windowHeight = $(window).height();
      scrollTo = topOffset;
      return this.htmlBody.animate({
        scrollTop: scrollTo
      }, 250);
    }

    _isSmallDevice() {
      return this.scrollLink.is(':visible');
    }

  };

  $(function() {
    return new App();
  });

}).call(this);
